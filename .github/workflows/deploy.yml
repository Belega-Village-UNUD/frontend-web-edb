name: Deploy

on:
  push:
    branches: ["staging"]
    paths-ignore: ["staging"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: belega-village-unud/frontend-web-edb
  COMMIT_SHA: ${{ github.sha }}
  REPO: frontend-web-edb
  INSTANCE_NAME: belega-instance
  ZONE: asia-southeast2-a

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read
      packages: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth-setup
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA }}

      - name: SSH to Compute Engine and Setup Environment
        id: compute-ssh-setup
        uses: "google-github-actions/ssh-compute@v1"
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          FRONTEND_HOST: ${{ secrets.FRONTEND_HOST }}
          FRONTEND_SERVICE: ${{ secrets.FRONTEND_SERVICE }}
          MIDTRANS_API_URL: ${{ secrets.MIDTRANS_API_URL }}
          MIDTRANS_SERVER_KEY: ${{ secrets.MIDTRANS_SERVER_KEY }}
          NEXT_PUBLIC_MIDTRANS_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_MIDTRANS_CLIENT_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_PROTOCOL: ${{ secrets.NEXT_PUBLIC_PROTOCOL }}
          NEXT_PUBLIC_HOSTNAME: ${{ secrets.NEXT_PUBLIC_HOSTNAME }}
          PORT: ${{ secrets.PORT }}
          PUBLISH_PORT: ${{ secrets.PUBLISH_PORT }}
          TOKEN_NAME: ${{ secrets.TOKEN_NAME }}
          TOKEN_VALUE: ${{ secrets.TOKEN_VALUE }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        with:
          instance_name: ${{ env.INSTANCE_NAME }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.SERVICE_ACCOUNT_SECRET_SSH_KEY }}
          user: ${{ secrets.CE_USER }}
          command: |-
            cd $(pwd)/${{ env.REPO }}
            git switch staging
            git pull origin staging
            tee .env <<EOF
            NODE_ENV=${{ env.NODE_ENV }}
            FRONTEND_HOST=${{ env.FRONTEND_HOST }}
            FRONTEND_SERVICE=${{ env.FRONTEND_SERVICE }}
            MIDTRANS_API_URL=${{ env.MIDTRANS_API_URL }}
            MIDTRANS_SERVER_KEY=${{ env.MIDTRANS_SERVER_KEY }}
            NEXT_PUBLIC_MIDTRANS_CLIENT_KEY=${{ env.NEXT_PUBLIC_MIDTRANS_CLIENT_KEY }}
            NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_PROTOCOL=${{ env.NEXT_PUBLIC_PROTOCOL }}
            NEXT_PUBLIC_HOSTNAME=${{ env.NEXT_PUBLIC_HOSTNAME }}
            PORT=${{ env.PORT }}
            PUBLISH_PORT=${{ env.PUBLISH_PORT }}
            TOKEN_NAME=${{ env.TOKEN_NAME }}
            TOKEN_VALUE=${{ env.TOKEN_VALUE }}
            EOF

      - name: Setup Output
        id: compute-ssh-setup-output
        run: |-
          echo '${{ steps.compute-ssh-setup.outputs.stdout }}'
          echo '${{ steps.compute-ssh-setup.outputs.stderr }}'

  eslint:
    needs: setup
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read
      security-events: write
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ESLint
        id: install-eslint
        run: |
          npm install eslint@8.57.0
          npm install @microsoft/eslint-formatter-sarif@2.1.7

      - name: Run ESLint
        id: run-eslint
        run: npx eslint .
          --config  eslint.config.mjs
          --format @microsoft/eslint-formatter-sarif
          --output-file eslint-result.sarif

      - name: Archive Eslint SAST code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-sast-report
          path: eslint-result.sarif

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        id: upload-eslint-result
        if: success() || failure()
        with:
          sarif_file: eslint-result.sarif
          wait-for-processing: true

  build:
    needs: setup
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth-build
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA }}

      - name: SSH to Compute Engine and Build
        id: compute-ssh-build
        uses: "google-github-actions/ssh-compute@v1"
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        with:
          instance_name: ${{ env.INSTANCE_NAME }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.SERVICE_ACCOUNT_SECRET_SSH_KEY }}
          user: ${{ secrets.CE_USER }}
          command: |-
            cd $(pwd)/${{ env.REPO }}
            git switch staging
            git pull origin staging
            bash ./shell/build.sh staging ${{ env.COMMIT_SHA }} ${{ env.REGISTRY }} ${{ env.IMAGE_NAME }}

      - name: Build Output
        id: compute-ssh-build-output
        run: |-
          echo '${{ steps.compute-ssh-build.outputs.stdout }}'
          echo '${{ steps.compute-ssh-build.outputs.stderr }}'

  release:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth-release
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.CLOUD_RUN_SA }}

      - name: SSH to Compute Engine and Release Image
        id: compute-ssh-release
        uses: "google-github-actions/ssh-compute@v1"
        with:
          instance_name: ${{ env.INSTANCE_NAME }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.SERVICE_ACCOUNT_SECRET_SSH_KEY }}
          user: ${{ secrets.CE_USER }}
          command: |-
            cd $(pwd)/${{ env.REPO }}
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker push ${{  env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}
            docker push ${{  env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging

      - name: Release Output
        id: compute-ssh-release-output
        run: |-
          echo '${{ steps.compute-ssh-build.outputs.stdout }}'
          echo '${{ steps.compute-ssh-build.outputs.stderr }}'

  deploy:
    needs: release
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read
      packages: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth-deploy
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA }}

      - name: SSH to Compute Engine and Deploy
        id: compute-ssh-deploy
        uses: "google-github-actions/ssh-compute@v1"
        with:
          instance_name: ${{ env.INSTANCE_NAME }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.SERVICE_ACCOUNT_SECRET_SSH_KEY }}
          user: ${{ secrets.CE_USER }}
          command: |-
            cd $(pwd)/${{ env.REPO }}
            bash ./shell/deploy.sh staging ${{ env.COMMIT_SHA }} ${{ env.REGISTRY }} ${{ env.IMAGE_NAME }}
            bash ./shell/proxy.sh
            rm .env

      - name: Deploy Output
        id: compute-ssh-deploy-output
        run: |-
          echo '${{ steps.compute-ssh-deploy.outputs.stdout }}'
          echo '${{ steps.compute-ssh-deploy.outputs.stderr }}'
